--- qmk_firmware/quantum/process_keycode/process_caps_word.c.bak	2023-06-02 06:13:25.866937486 +0300
+++ qmk_firmware/quantum/process_keycode/process_caps_word.c	2023-06-06 20:49:37.014732363 +0300
@@ -13,6 +13,7 @@
 // limitations under the License.
 
 #include "process_caps_word.h"
+#include "keymap_ru_type.h"
 
 bool process_caps_word(uint16_t keycode, keyrecord_t* record) {
     if (keycode == CAPSWRD) { // Pressing CAPSWRD toggles Caps Word.
@@ -168,18 +169,42 @@
 
 __attribute__((weak)) bool caps_word_press_user(uint16_t keycode) {
     switch (keycode) {
+
+#ifdef RUT_RUBL
+
+        // Russian typewriter keycodes that continue Caps Word, with shift applied.
+        case RUT_HA:
+        case RUT_HARD:
+        case RUT_ZHE:
+        case RUT_E:
+        case RUT_BE:
+        case RUT_YU:
+        case RUT_YO:
+            // TODO: Only do this if Russian layer is active
+            add_weak_mods(MOD_BIT(KC_LSFT)); // Apply shift to next key.
+            send_keyboard_report();
+            return true;
+
+#endif // RUT_RUBL
+
         // Keycodes that continue Caps Word, with shift applied.
         case KC_A ... KC_Z:
         case KC_MINS:
+            // TODO: KC_MINS in Russian layout should stop Caps Word
+            // TODO: Only do this if Russian layer is active
             add_weak_mods(MOD_BIT(KC_LSFT)); // Apply shift to next key.
             send_keyboard_report();
             return true;
 
         // Keycodes that continue Caps Word, without shifting.
         case KC_1 ... KC_0:
+            // TODO: KC_1..0 in Russian layout should send shifted codes
+            // TODO: Only do this if Russian layer is active
         case KC_BSPC:
         case KC_DEL:
         case KC_UNDS:
+            // TODO: KC_UNDS in Russian layout should stop Caps Word
+            // TODO: Only do this if Russian layer is active
             return true;
 
         default:
